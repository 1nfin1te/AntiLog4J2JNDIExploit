package moe.orangemc.shiina_xi_yu.antilog4jjndiexploit;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.ProtocolManager;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.reflect.StructureModifier;
import com.google.common.collect.Sets;
import org.bukkit.Bukkit;
import org.bukkit.plugin.java.JavaPlugin;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.util.HashSet;
import java.util.function.Function;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PlayerClientPacketHandle
{
    public static void initialize(JavaPlugin plugin)
    {
        ProtocolManager manager = ProtocolLibrary.getProtocolManager();
        HashSet<PacketType> packetTypes = Sets.newHashSet(PacketType.Handshake.Client.getInstance().values());
        packetTypes.addAll(PacketType.Play.Client.getInstance().values());
        packetTypes.addAll(PacketType.Login.Client.getInstance().values());
        manager.addPacketListener(new PacketAdapter(PacketAdapter.params()
                .plugin(plugin)
                .clientSide()
                .listenerPriority(ListenerPriority.LOWEST)
                .types(packetTypes))
        {

            private MethodHandle isRecord()
            {
                MethodHandles.Lookup lookup = MethodHandles.lookup();
                try
                {
                    return lookup.findVirtual(Class.class, "isRecord", MethodType.methodType(boolean.class));
                }
                catch (Throwable ignore)
                {
                    return MethodHandles.dropArguments(MethodHandles.constant(boolean.class, false), 0, Class.class);
                }
            }

            final MethodHandle isRecord = isRecord();

            final Pattern regex = Pattern.compile(
                    "\\$\\{.*?:.*?}",
                    Pattern.CASE_INSENSITIVE |
                            Pattern.MULTILINE |
                            Pattern.DOTALL
            );

            public String replaceAll(String origin, Matcher matcher, Function<String, String> replacement)
            {
                matcher.reset();
                boolean result = matcher.find();
                if (result)
                {
                    StringBuilder sb = new StringBuilder();
                    int lastPosition = 0;
                    do
                    {
                        sb.append(origin, lastPosition, matcher.start());
                        String replaced = replacement.apply(
                                origin.substring(matcher.start(), lastPosition = matcher.end())
                        );
                        sb.append(replaced);
                        result = matcher.find();
                    } while (result);
                    sb.append(origin, lastPosition, origin.length());
                    return sb.toString();
                }
                return origin;
            }

            private String replace0(String v, PacketEvent event)
            {
                Matcher matcher = regex.matcher(v);
                if (matcher.find() && Main.msg_broadcast_player_packet != null) Bukkit.broadcastMessage(Main.msg_broadcast_player_packet.replace("%Player%", event.getPlayer().getName()));
                return replaceAll(v, matcher, v2 -> v2.replace('{', '[').replace('}', ']'));
            }

            @Override
            public void onPacketReceiving(PacketEvent event)
            {
                try
                {
                    if ((boolean) isRecord.invokeExact(event.getPacket().getHandle().getClass())) return;

                    StructureModifier<String> strings = event.getPacket().getStrings();
                    for (int i = 0; i < strings.size(); i++) strings.modify(i, v -> replace0(v, event));
                    StructureModifier<String[]> stringArrays = event.getPacket().getStringArrays();
                    for (int i = 0; i < stringArrays.size(); i++)
                    {
                        stringArrays.modify(i, v ->
                        {
                            for (int z = 0; z < v.length; z++)
                            {
                                v[z] = replace0(v[z], event);
                            }
                            return v;
                        });
                    }
                }
                catch (Throwable e)
                {
                    throw new RuntimeException(e);
                }
            }
        });
    }
}
